'use strict';

var projeto = angular.module('projeto', ['ui.router', 'ngAnimate', 'toastr', 'ngAnimate', 'ngSanitize', 'ui.bootstrap', 'ui.utils.masks', 'ui.select']);
'use strict';

projeto.constant('consts', {
  appName: 'FarmPlus',
  version: '1.0',
  owner: 'Hackton Zenvia',
  author: 'Flávio Lourenço da Silva',
  year: '2021',
  site: '',
  urlBase: '',
  apiUrl: 'http://localhost:21102/api/v1',
  oapiUrl: 'http://localhost:21102/api/v1',
  // apiUrl: 'http://192.168.99.226:21102/api/v1',
  // oapiUrl: 'http://192.168.99.226:21102/api/v1',
  userKey: '_primeira_app_user'
});

projeto.run(['$rootScope', 'consts', function ($rootScope, consts) {
  $rootScope.consts = consts;
}]);
'use strict';

projeto.config(['$stateProvider', '$urlRouterProvider', '$locationProvider', '$httpProvider', '$qProvider', function ($stateProvider, $urlRouterProvider, $locationProvider, $httpProvider, $qProvider) {

    $qProvider.errorOnUnhandledRejections(false);

    $stateProvider.state('dashboard', {
        url: "/dashboard",
        templateUrl: "src/dashboard/dashboard.html",
        controller: 'dashCtrl'
    }).state('produto', {
        url: '/produto?page',
        templateUrl: 'src/produto/produto.html',
        controller: 'crmCtrl'
    }).state('parceiro', {
        url: '/parceiro?page',
        templateUrl: 'src/parceiro/parceiro.html',
        controller: 'crmCtrl'
    });

    $urlRouterProvider.otherwise('/dashboard');
}]);
'use strict';

(function () {

  'use strict';

  projeto.controller('dashCtrl', ['$http', 'consts', 'msgs', 'auth', DashController]);

  function DashController($http, consts, msgs, auth) {
    var vm = this;

    vm.produtos = 0;
    vm.produtores = 0;
    vm.compradores = 0;
    vm.total = 0;

    vm.getDashboard = function (api) {
      var url = void 0;
      if (api == 1) {
        url = consts.apiUrl + '/produto/count/qtd';
      }
      $http.get(url).then(function (resp) {
        if (api == 1) {
          vm.produtos = resp.data[0].QTD;
        } else if (api == 2) {
          vm.produtores = resp.data[0].QTD;
        } else {
          vm.compradores = resp.data[0].QTD;
        }
      }).catch(function (resp) {
        msgs.addError(resp.data);
      });
      vm.total = vm.compradores + vm.produtores;
    };

    vm.getDashboard(1);
    // vm.getDashboard(2)
    // vm.getDashboard(3)
  }
  //função autoenvocada do javascript para fugir escopo global  
})();
'use strict';

projeto.controller('peacCtrl', ['$scope', '$http', '$location', '$rootScope', 'auth', 'listas', 'msgs', 'tabs', 'consts', 'CidadesService', 'CepService', peacController]);

function peacController($scope, $http, $location, $rootScope, auth, listas, msgs, tabs, consts, CidadesService, CepService) {
  var vm = this;

  //Init
  vm.initTabCreate = function () {
    var dt = new Date();
    var dt2 = new Date();
    dt2.setMonth(dt2.getMonth() + 37);

    vm.crm.dtCadastro = dt.toISOString();
    vm.crm.idApi = 1;
    vm.crm.cnpjAgenteFinanceiro = 18734994000135;
    vm.crm.idOperacaoAgente = 15;
    vm.crm.codigoIbgeMunicipioInvestimento = 520870;
    vm.crm.estado = 'GO';
    vm.crm.dataContratacao = dt.toISOString();
    vm.crm.dataPrimeiraLiberacao = dt.toISOString();
    //vm.crm.cnaePortariaGrandeEmpresa = 100001
    //vm.crm.dataVencimentoOperacao = dt2.getDate().toString().padStart(2, '0') + "/" + dt2.getMonth().toString().padStart(2, '0') + "/" + dt2.getFullYear()
  };

  vm.filtro = {};
  vm.log = {};

  // listas
  vm.estados = listas.getEstados();
  vm.linhaPeac = listas.getLinhaPeac();
  vm.modalidades = listas.getCodigoModalidade();
  vm.tipoLogradouro = listas.getCodigoTipoLogradouro();
  vm.naturezaCliente = listas.getCodigoNaturezaClienteFinal();
  vm.EcgDeveSerSomadoAoValorOperacao = listas.getCodigoEcgDeveSerSomadoAoValorOperacao();
  vm.indexadorTaxaJuros = listas.getCodigoIndexadorTaxaJuros();
  vm.classRiscoOperacao = listas.getCodigoClassRiscoOperacao();
  vm.tipoReceitaBruta = listas.getCodigoTipoReceitaBruta();
  vm.tipoGarantia = listas.getCodigoTipoGarantia();

  vm.getId = function (list, id) {
    var ret = "";
    for (var i = 0; i < list.length; i++) {
      if (list[i].id == id) {
        ret = list[i].name;
        break;
      }
    }
    return ret;
  };

  vm.getName = function (list, name) {
    var ret = 0;
    for (var i = 0; i < list.length; i++) {
      if (list[i].name == name) {
        ret = list[i].id;
        break;
      }
    }
    return ret;
  };

  $scope.$watch("vm.crm.estado", function (value) {
    if (value) {
      vm.getCidades();
    }
  });

  $scope.$watch("vm.crm.cidade", function (value) {
    if (value && value != "null") {
      CidadesService.getNome(value).then(function (resp) {
        if (resp.data.length > 0) {
          var CodigoIBGE = resp.data[0].CodigoIBGE;
          vm.crm.codigoIbgeMunicipio = CodigoIBGE.toString().substring(0, CodigoIBGE.length - 1);
        } else {
          msgs.addWarning('Código IBGE não localizado do cliente');
        }
      });
    }
  });

  $scope.$watch("vm.crm.cep", function (value) {
    if (value && value != "null") {
      CepService.get(value).then(function (resp) {
        if (resp.data) {
          if (vm.crm.nomeLogradouro == undefined) {
            vm.crm.nomeLogradouro = resp.data.logradouro;
            var index = vm.crm.nomeLogradouro.split(" ");
            vm.crm.tipoLogradouro = vm.getName(vm.tipoLogradouro, index[0]);
          }
          if (vm.crm.nomeBairro == undefined) {
            vm.crm.nomeBairro = resp.data.bairro;
          }
          vm.crm.estado = resp.data.estado;
          vm.crm.cidade = resp.data.cidade;
          vm.crm.codigoIbgeMunicipio = resp.data.cidade_info.codigo_ibge;
        } else {
          vm.crm.tipoLogradouro = 99;
          msgs.addWarning('CEP não localizado');
        }
      });
    }
  });

  vm.getCidades = function () {
    if (vm.crm.estado == undefined) {
      vm.crm.estado = 'GO';
    }
    CidadesService.get(vm.crm.estado).then(function (resp) {
      //console.log('controller cidades: ' +  JSON.stringify(resp.data))
      if (resp.data.length > 0) {
        vm.cidades = resp.data;
      } else {
        msgs.addWarning('Cidades não foram localizadas.');
      }
    });
  };

  vm.getCpfCnpj = function (id) {
    if (id) {
      var url = consts.apiUrl + '/cpfcnpj/' + id;
      msgs.addInfo('Aguarde consultando cliente!');
      $http.get(url).then(function (resp) {
        vm.crm.contrato = resp.data[0].CONTRATO;
        vm.crm.razaoSocialClienteFinal = resp.data[0].CLIENTE;
      }).catch(function (resp) {
        msgs.addWarning('Cliente e Contrato não localizado!');
      });
    }
  };

  vm.alerts = [];

  vm.addAlert = function (mensagem) {
    vm.alerts.push({ msg: JSON.stringify(mensagem) });
    //jsonStr.replace("","/({|}[,]*|[^{}:]+:[^{}:,]*[,{]*)/g")
  };

  vm.addAlertValidade = function (mensagem) {
    vm.alerts.push({ type: 'warning', msg: mensagem });
  };

  vm.closeAlert = function (index) {
    vm.alerts.splice(index, 1);
  };

  vm.validarCNPJ = function (cnpj) {
    cnpj = cnpj.replace(/[^\d]+/g, '');
    if (cnpj == '') return false;
    if (cnpj.length != 14) return false;
    // LINHA 10 - Elimina CNPJs invalidos conhecidos
    if (cnpj == "00000000000000" || cnpj == "11111111111111" || cnpj == "22222222222222" || cnpj == "33333333333333" || cnpj == "44444444444444" || cnpj == "55555555555555" || cnpj == "66666666666666" || cnpj == "77777777777777" || cnpj == "88888888888888" || cnpj == "99999999999999") return false; // LINHA 21

    // Valida DVs LINHA 23 -
    tamanho = cnpj.length - 2;
    numeros = cnpj.substring(0, tamanho);
    digitos = cnpj.substring(tamanho);
    soma = 0;
    pos = tamanho - 7;
    for (i = tamanho; i >= 1; i--) {
      soma += numeros.charAt(tamanho - i) * pos--;
      if (pos < 2) pos = 9;
    }
    resultado = soma % 11 < 2 ? 0 : 11 - soma % 11;
    if (resultado != digitos.charAt(0)) return false;

    tamanho = tamanho + 1;
    numeros = cnpj.substring(0, tamanho);
    soma = 0;
    pos = tamanho - 7;
    for (i = tamanho; i >= 1; i--) {
      soma += numeros.charAt(tamanho - i) * pos--;
      if (pos < 2) pos = 9;
    }
    resultado = soma % 11 < 2 ? 0 : 11 - soma % 11;
    if (resultado != digitos.charAt(1)) return false; // LINHA 49

    return true; // LINHA 51
  };

  vm.validarCPF = function (strCPF) {
    var Soma;
    var Resto;
    Soma = 0;
    if (strCPF == "00000000000") return false;

    for (i = 1; i <= 9; i++) {
      Soma = Soma + parseInt(strCPF.substring(i - 1, i)) * (11 - i);
    }Resto = Soma * 10 % 11;

    if (Resto == 10 || Resto == 11) Resto = 0;
    if (Resto != parseInt(strCPF.substring(9, 10))) return false;

    Soma = 0;
    for (i = 1; i <= 10; i++) {
      Soma = Soma + parseInt(strCPF.substring(i - 1, i)) * (12 - i);
    }Resto = Soma * 10 % 11;

    if (Resto == 10 || Resto == 11) Resto = 0;
    if (Resto != parseInt(strCPF.substring(10, 11))) return false;
    return true;
  };

  vm.limparFiltro = function () {
    vm.filtro = {};
  };

  vm.getApi = function (id) {
    //const page = parseInt($location.search().page) || 1
    var url = consts.apiUrl + '/apipeac/' + id;

    $http.get(url).then(function (resp) {
      vm.crms = resp.data;
      vm.crm = {};
      tabs.show(vm, { tabList: true, tabCreate: true });
    }).catch(function (resp) {
      vm.addAlert(resp.data);
    });
  };

  vm.getPeac = function (add) {
    var page = parseInt($location.search().page) || 1;
    var url = consts.apiUrl + '/peac';
    msgs.addInfo('Aguarde consulta sendo realizada!');

    $http.get(url).then(function (resp) {
      vm.crms = resp.data;
      if (!add) {
        vm.crm = {};
        tabs.show(vm, { tabList: true, tabCreate: true });
      }
    }).catch(function (resp) {
      //msgs.addError(resp.data)
      vm.addAlert(resp.data);
    });
  };

  vm.getLog = function (id) {
    var url = consts.apiUrl + '/logpeac/' + id;
    $http.get(url).then(function (resp) {
      vm.mensagens = resp.data;
    }).catch(function (resp) {
      vm.addAlert(resp.data);
    });
  };

  vm.create = function () {
    if (!vm.validaEntradas()) {
      var url = consts.apiUrl + '/peac';

      $http.post(url, vm.crm).then(function (resp) {
        console.log(resp.data);
        msgs.addSuccess('Operação realizada com sucesso!!');
        vm.crm = {};
        vm.getPeac();
      }).catch(function (resp) {
        //msgs.addError(resp.data)
        vm.addAlert(resp.data);
      });
    }
  };

  vm.createLog = function () {
    var url = consts.apiUrl + '/logpeac';
    $http.post(url, vm.log).then(function (response) {
      vm.getLog(vm.log.idpeac);
      vm.log = {};
    }).catch(function (resp) {
      vm.addAlert(resp.data);
    });
  };

  vm.cancel = function () {
    tabs.show(vm, { tabList: true, tabCreate: true });
    vm.alerts.splice(0, vm.alerts.length);
    vm.crm = {};
    vm.log = {};
    vm.mensagens = {};
    vm.initTabCreate();
  };

  vm.update = function () {
    vm.alerts.splice(0, vm.alerts.length);
    var url = consts.apiUrl + '/peac/' + vm.crm.id;
    $http.patch(url, vm.crm).then(function (response) {
      //vm.crm = {}
      vm.getPeac('true');
      //tabs.show(vm, { tabList: true, tabCreate: true })
      msgs.addSuccess('Atualização realizada com sucesso!');
    }).catch(function (resp) {
      //msgs.addError(resp.data)
      vm.addAlert(resp.data);
    });
  };

  vm.delete = function () {
    vm.alerts.splice(0, vm.alerts.length);
    var url = consts.apiUrl + '/peac/' + vm.crm.id;
    $http.delete(url, vm.crm).then(function (response) {
      vm.crm = {};
      vm.getPeac();
      tabs.show(vm, { tabList: true, tabCreate: true });
      msgs.addSuccess('Exclusão realizada com sucesso!');
    }).catch(function (resp) {
      //msgs.addError(resp.data)
      vm.addAlert(resp.data);
    });
  };

  vm.enviar = function () {
    if (!vm.validaEntradas()) {
      var urlToken = consts.apiUrl + '/tokenpeac';
      msgs.addInfo('Aguarde consulta sendo realizada!');

      $http.get(urlToken).then(function (response) {
        var token = response.data.access_token;
        var url = consts.apiUrl + '/enviarpeac/' + vm.crm.id + '/' + token;

        $http.post(url, vm.crm).then(function (response) {
          console.log(response.data);
          vm.crm.numeroReservaPreValidacao = response.data.numeroReservaPreValidacao;
          vm.crm.valorTotalFinanciado = response.data.valorTotalFinanciado;
          vm.crm.status = 'Enviado';

          var url = consts.apiUrl + '/peac/' + vm.crm.id;
          $http.patch(url, vm.crm).then(function (response) {
            vm.log.idpeac = vm.crm.id;
            vm.log.status = vm.crm.status;
            vm.log.mensagem = "Envio realizado com sucesso!";
            vm.createLog();
            vm.crm = {};
            vm.getPeac();
            tabs.show(vm, { tabList: true, tabCreate: true });
            vm.initTabCreate();
            msgs.addSuccess('Envio realizado com sucesso!');
          }).catch(function (resp) {
            //msgs.addError(resp.data)
            vm.addAlert(resp.data);
            vm.log.idpeac = vm.crm.id;
            vm.log.status = "Erro salvar retorno";
            vm.log.mensagem = resp.data;
            vm.createLog();
          });
        }).catch(function (resp) {
          //msgs.addError(resp.data)
          vm.addAlert(resp.data);
          vm.log.idpeac = vm.crm.id;
          vm.log.status = "Erro enviar Proname";
          vm.log.mensagem = resp.data;
          vm.createLog();
        });
      }).catch(function (resp) {
        //msgs.addError(resp.data)
        vm.addAlert(resp.data);
        vm.log.idpeac = vm.crm.id;
        vm.log.status = "Erro buscar Token";
        vm.log.mensagem = resp.data;
        vm.createLog();
      });
    }
  };

  vm.validaEntradas = function () {
    var ret = false;
    // for (var i = 0; i < vm.alerts.length; i++) {
    //   vm.alerts.splice(i, 1);
    // }
    vm.alerts.splice(0, vm.alerts.length);

    if (vm.crm.dtCadastro == undefined) {
      var dt = new Date();
      vm.crm.dtCadastro = dt.toISOString();
    }
    if (isNaN(vm.crm.idApi)) {
      vm.addAlertValidade('Selecione a API!');
      ret = true;
    }
    if (isNaN(vm.crm.modalidade)) {
      vm.addAlertValidade('Selecione Modalidade da Operação!');
      ret = true;
    }
    if (isNaN(vm.crm.cnpjClienteFinal)) {
      vm.addAlertValidade('CNPJ do Cliente sem preencher!');
      ret = true;
    }
    if (vm.crm.razaoSocialClienteFinal == undefined || vm.crm.razaoSocialClienteFinal == '') {
      vm.addAlertValidade('Razão Social do Cliente sem preencher!');
      ret = true;
    }
    if (isNaN(vm.crm.cep)) {
      vm.addAlertValidade('CEP sem preencher!');
      ret = true;
    }
    if (vm.crm.nomeLogradouro == undefined || vm.crm.nomeLogradouro == '') {
      vm.addAlertValidade('Logradouro sem preencher!');
      ret = true;
    }
    if (vm.crm.numeroLogradouro == undefined || vm.crm.numeroLogradouro == '') {
      vm.addAlertValidade('Número sem preencher!');
      ret = true;
    }
    if (vm.crm.complemento == undefined || vm.crm.complemento == '') {
      vm.addAlertValidade('Complemento sem preencher!');
      ret = true;
    }
    if (vm.crm.nomeBairro == undefined || vm.crm.nomeBairro == '') {
      vm.addAlertValidade('Bairro sem preencher!');
      ret = true;
    }
    if (vm.crm.cidade == undefined || vm.crm.cidade == '') {
      vm.addAlertValidade('Cidade sem preencher!');
      ret = true;
    }
    if (vm.crm.codigoIbgeMunicipio == undefined || vm.crm.codigoIbgeMunicipio == '') {
      vm.addAlertValidade('Código IBGE do Cliente sem preencher!');
      ret = true;
    }
    if (isNaN(vm.crm.cnaeClienteFinal)) {
      vm.addAlertValidade('CNAE do Cliente sem preencher!');
      ret = true;
    }
    if (isNaN(vm.crm.cnaePortariaGrandeEmpresa)) {
      vm.addAlertValidade('CNAE da Portaria Grande Empresa sem preencher!');
      ret = true;
    }
    if (isNaN(vm.crm.naturezaClienteFinal)) {
      vm.addAlertValidade('Selecione Natureza do Cliente!');
      ret = true;
    }
    if (isNaN(vm.crm.valorOperacao)) {
      vm.addAlertValidade('Selecione Valor da Operação!');
      ret = true;
    }
    if (vm.crm.ecgDeveSerSomadoAoValorOperacao == undefined || vm.crm.ecgDeveSerSomadoAoValorOperacao == '') {
      vm.addAlertValidade('Selecione ECG deve ser somado a operação!');
      ret = true;
    }
    if (vm.crm.dataContratacao == undefined || vm.crm.dataContratacao == '') {
      vm.addAlertValidade('Data Contratação sem preencher!');
      ret = true;
    }
    if (vm.crm.dataPrimeiraLiberacao == undefined || vm.crm.dataPrimeiraLiberacao == '') {
      vm.addAlertValidade('Data 1a. Liberação sem preencher!');
      ret = true;
    }
    if (isNaN(vm.crm.valorPrimeiraLiberacao)) {
      vm.addAlertValidade('Vlr 1a. LIberação sem preencher!');
      ret = true;
    }
    if (isNaN(vm.crm.indexadorTaxaJuros)) {
      vm.addAlertValidade('Selecione o Indexador Taxas de Juros!');
      ret = true;
    }
    if (isNaN(vm.crm.percentualIndexador)) {
      vm.addAlertValidade('Preencha Percentual do Indexador!');
      ret = true;
    }
    if (isNaN(vm.crm.taxaEfetivaAnual)) {
      vm.addAlertValidade('Preencha Taxa Efetuva Anual!');
      ret = true;
    }
    if (vm.crm.riscoOperacao == undefined || vm.crm.riscoOperacao == '') {
      vm.addAlertValidade('Selecione a Classif. Risco da Operação!');
      ret = true;
    }
    if (isNaN(vm.crm.receitaBrutaClienteFinal)) {
      vm.addAlertValidade('Preencha a Receita Bruta!');
      ret = true;
    }
    if (vm.crm.tipoReceitaBruta == undefined || vm.crm.tipoReceitaBruta == '') {
      vm.addAlertValidade('Selecione o Tipo Receira Bruta!');
      ret = true;
    }
    if (vm.crm.dataReferenciaReceitaBruta == undefined || vm.crm.dataReferenciaReceitaBruta == '') {
      vm.addAlertValidade('Preencha a Data Referência Receita!');
      ret = true;
    }
    if (isNaN(vm.crm.tipoGarantia)) {
      vm.addAlertValidade('Selecione o Tipo de Garantia!');
      ret = true;
    }
    if (vm.crm.dataAmortizacao == undefined || vm.crm.dataAmortizacao == '') {
      vm.addAlertValidade('Preencha a Data Amortização!');
      ret = true;
    }

    // regras de negócio

    return ret;
  };

  vm.showTabUpdate = function (crm) {
    vm.crm = crm;
    vm.getLog(crm.id);
    tabs.show(vm, { tabUpdate: true, tabLista: true });
  };

  vm.showTabDelete = function (crm) {
    vm.crm = crm;
    tabs.show(vm, { tabDelete: true });
  };

  vm.getPeac();
}
'use strict';

projeto.controller('crmCtrl', ['$scope', '$http', '$location', '$rootScope', 'auth', 'listas', 'msgs', 'tabs', 'consts', 'CidadesService', crmController]);

function crmController($scope, $http, $location, $rootScope, auth, listas, msgs, tabs, consts, CidadesService) {

  //Init
  $scope.initTabCreate = function () {
    var dt = new Date();
    var dt2 = new Date();
    dt2.setMonth(dt2.getMonth() + 37);
    // Conforme MPO, o prazo são 1095 dias (aceitando intervalos entre 1093 e 1098)

    $scope.crm.dtCadastro = dt.toISOString();
    $scope.crm.idApi = 1;
    $scope.crm.codigoFundoGarantidor = 2;
    $scope.crm.codigoTipoPessoa = 2;
    $scope.crm.numeroAgenciaContratanteOperacao = 15;
    $scope.crm.estado = 'GO';
    $scope.crm.percentualGarantiaOperacaoCredito = 100;
    $scope.crm.codigoTipoModalidadeCredito = 1;
    $scope.crm.codigoTipoFonteRecurso = 11;
    $scope.crm.codigoTipoProgramaCredito = 39;
    $scope.crm.codigoTipoCronogramaAmortizacao = 1;
    $scope.crm.codigoTipoCondicaoEspecial = 1;
    $scope.crm.codigoTipoFormalizacao = 1;
    $scope.crm.codigoTipoFinalidadeCredito = 2;
    $scope.crm.dataFormalizacaoOperacao = dt.toISOString();
    $scope.crm.dataVencimentoOperacao = dt2.getDate().toString().padStart(2, '0') + "/" + dt2.getMonth().toString().padStart(2, '0') + "/" + dt2.getFullYear();
  };

  $scope.isCollapsed = true;
  $scope.filtro = {};
  $scope.log = {};

  // pronampe
  $scope.estados = listas.getEstados();
  $scope.linhaCredito = listas.getLinhaCredito();
  $scope.tipoPessoa = listas.getCodigoTipoPessoa();
  $scope.fundoGarantidor = listas.getCodigoFundoGarantidor();
  $scope.tipoPublicoAlvo = listas.getCodigoTipoPublicoAlvo();
  $scope.tipoModalidadeCredito = listas.getCodigoTipoModalidadeCredito();
  $scope.tipoFinalidadeCredito = listas.getCodigoTipoFinalidadeCredito();
  $scope.tipoFonteRecurso = listas.getCodigoTipoFonteRecurso();
  $scope.tipoProgramaCredito = listas.getCodigoTipoProgramaCredito();
  $scope.tipoCronogramaAmortizacao = listas.getCodigoTipoCronogramaAmortizacao();
  $scope.tipoCondicaoEspecial = listas.getCodigoTipoCondicaoEspecial();
  $scope.tipoFormalizacao = listas.getCodigoTipoFormalizacao();

  $scope.getId = function (list, id) {
    for (var i = 0; i < list.length; i++) {
      if (list[i].id == id) {
        return list[i].name;
        break;
      }
    }
    // angular.forEach($scope.linhaCredito, function (item, index) {
    //   if (item.id == id) {
    //     return item.name
    //   }
    // })
  };

  /*
  var jsonVar = {
          text: "example",
          number: 1,
          obj: {
              "more text": "another example"
          },
          obj2: {
              "yet more text": "yet another example"
          }
      }, // THE RAW OBJECT
      jsonStr = JSON.stringify(jsonVar),  // THE OBJECT STRINGIFIED
      regeStr = '', // A EMPTY STRING TO EVENTUALLY HOLD THE FORMATTED STRINGIFIED OBJECT
      f = {
              brace: 0
          }; // AN OBJECT FOR TRACKING INCREMENTS/DECREMENTS,
            // IN PARTICULAR CURLY BRACES (OTHER PROPERTIES COULD BE ADDED)
    regeStr = jsonStr.replace(/({|}[,]*|[^{}:]+:[^{}:,]*[,{]*)/g, function (m, p1) {
  var rtnFn = function() {
          return '<div style="text-indent: ' + (f['brace'] * 20) + 'px;">' + p1 + '</div>';
      },
      rtnStr = 0;
      if (p1.lastIndexOf('{') === (p1.length - 1)) {
          rtnStr = rtnFn();
          f['brace'] += 1;
      } else if (p1.indexOf('}') === 0) {
          f['brace'] -= 1;
          rtnStr = rtnFn();
      } else {
          rtnStr = rtnFn();
      }
      return rtnStr;
  });
    document.body.innerHTML += regeStr; // appends the result to the body of the HTML document
  */

  //Busca por cidades
  //http://educacao.dadosabertosbr.com/api/cidades/go
  /*
    $scope.cidades = [
      { name: 'Goiânia' },
      { name: 'Aparecida de Goiânia' },
      { name: 'Águas Lindas de Goiás' },
      { name: 'Valparaiso' },
      { name: 'Santo Antônio de Goiás' },
      { name: 'Santo Antônio do Descoberto' },
      { name: 'Trindade' },
      { name: 'Senador Canedo' },
      { name: 'Brasília' },
      { name: 'Morrinhos' },
      { name: 'Hidrolândia' }
    ]
  */

  //Escuta alteração do estado 
  $scope.$watch("crm.estado", function (value) {
    if (value) {
      //console.log('entrei atualiza cidades')
      $scope.getCidades();
    }
  });

  $scope.$watch("crm.cidade", function (value) {
    if (value && value != "null") {
      CidadesService.getNome(value).then(function (resp) {
        if (resp.data.length > 0) {
          var CodigoIBGE = resp.data[0].CodigoIBGE;
          $scope.crm.codigoIbgeMunicipioAgencia = CodigoIBGE.toString().substring(0, CodigoIBGE.length - 1);
        } else {
          msgs.addWarning('Código IBGE não localizado');
        }
      });
    }
  });

  //Busca de cidades
  $scope.getCidades = function () {
    if ($scope.crm.estado == undefined) {
      $scope.crm.estado = 'GO';
    }
    CidadesService.get($scope.crm.estado).then(function (resp) {
      //console.log('controller cidades: ' +  JSON.stringify(resp.data))
      if (resp.data.length > 0) {
        $scope.cidades = resp.data;
      } else {
        msgs.addWarning('Cidades não foram localizadas.');
      }
    });
  };

  $scope.getCidade = function (nome) {
    CidadesService.getNome(nome).then(function (resp) {
      if (resp.data.length > 0) {
        $scope.CodigoIBGE = resp.data[0].CodigoIBGE;
      } else {
        msgs.addWarning('Código IBGE não localizado');
        $scope.CodigoIBGE = null;
      }
    });
  };

  $scope.getCpfCnpj = function (id) {
    if (id) {
      var url = consts.apiUrl + '/cpfcnpj/' + id;
      msgs.addInfo('Aguarde consultando cliente!');
      $http.get(url).then(function (resp) {
        $scope.crm.contrato = resp.data[0].CONTRATO;
        $scope.crm.cliente = resp.data[0].CLIENTE;
      }).catch(function (resp) {
        msgs.addWarning('Contrato e Cliente não localizado!');
      });
    }
  };

  //CEP
  $rootScope.$on('cep', function (event, data) {
    //console.log('controller cep: ' +  JSON.stringify(data))
    //$scope.crm.complemento = data.complemento
    if (data) {
      if ($scope.crm.logradouro == undefined) {
        $scope.crm.logradouro = data.logradouro;
      }
      if ($scope.crm.bairro == undefined) {
        $scope.crm.bairro = data.bairro;
      }
      $scope.crm.estado = data.estado;
      $scope.crm.cidade = data.cidade;
    }
  });

  /*
  for (var i = 0, len = $scope.usuarios.length; i < len; i++) {
    if ($scope.usuarios[i].nome == usuario) {
      return $scope.usuarios[i].equipe
      break;
    }
  }
    angular.forEach($scope.usuarios, function(item,index){
    console.log(item.nome)
    if(flag) {
      if(item.nome == usuario){
        console.log('>>' + item.equipe)
        flag = false        
        return item.equipe
      } 
    }
    //console.log(item,index)
  })
    var array = ['foo', 'bar', 'yay'];
  $.each(array, function(index, element){
      if (element === 'foo') {
          return true; // continue
      }
      console.log(this);
      if (element === 'bar') {
          return false; // break
      }
  });
    //Example for some:
  var ary = ["JavaScript", "Java", "CoffeeScript", "TypeScript"];
    ary.some(function (value, index, _ary) {
      console.log(index + ": " + value);
      return value === "JavaScript";
  });
  
  //Example for every:
  var ary = ["JavaScript", "Java", "CoffeeScript", "TypeScript"];
    ary.every(function(value, index, _ary) {
      console.log(index + ": " + value);
      return value.indexOf("Script") > -1;
  });
  */

  $scope.alerts = [
    // { type: 'danger', msg: 'Oh snap! Change a few things up and try submitting again.' },
    // { type: 'success', msg: 'Well done! You successfully read this important alert message.' }
  ];

  $scope.addAlert = function (mensagem) {
    $scope.alerts.push({ msg: JSON.stringify(mensagem) });
    //jsonStr.replace("","/({|}[,]*|[^{}:]+:[^{}:,]*[,{]*)/g")
  };

  $scope.addAlertValidade = function (mensagem) {
    $scope.alerts.push({ type: 'warning', msg: mensagem });
  };

  $scope.closeAlert = function (index) {
    $scope.alerts.splice(index, 1);
  };

  $scope.validarCNPJ = function (cnpj) {
    cnpj = cnpj.replace(/[^\d]+/g, '');
    if (cnpj == '') return false;
    if (cnpj.length != 14) return false;
    // LINHA 10 - Elimina CNPJs invalidos conhecidos
    if (cnpj == "00000000000000" || cnpj == "11111111111111" || cnpj == "22222222222222" || cnpj == "33333333333333" || cnpj == "44444444444444" || cnpj == "55555555555555" || cnpj == "66666666666666" || cnpj == "77777777777777" || cnpj == "88888888888888" || cnpj == "99999999999999") return false; // LINHA 21

    // Valida DVs LINHA 23 -
    tamanho = cnpj.length - 2;
    numeros = cnpj.substring(0, tamanho);
    digitos = cnpj.substring(tamanho);
    soma = 0;
    pos = tamanho - 7;
    for (i = tamanho; i >= 1; i--) {
      soma += numeros.charAt(tamanho - i) * pos--;
      if (pos < 2) pos = 9;
    }
    resultado = soma % 11 < 2 ? 0 : 11 - soma % 11;
    if (resultado != digitos.charAt(0)) return false;

    tamanho = tamanho + 1;
    numeros = cnpj.substring(0, tamanho);
    soma = 0;
    pos = tamanho - 7;
    for (i = tamanho; i >= 1; i--) {
      soma += numeros.charAt(tamanho - i) * pos--;
      if (pos < 2) pos = 9;
    }
    resultado = soma % 11 < 2 ? 0 : 11 - soma % 11;
    if (resultado != digitos.charAt(1)) return false; // LINHA 49

    return true; // LINHA 51
  };

  $scope.validarCPF = function (strCPF) {
    var Soma;
    var Resto;
    Soma = 0;
    if (strCPF == "00000000000") return false;

    for (i = 1; i <= 9; i++) {
      Soma = Soma + parseInt(strCPF.substring(i - 1, i)) * (11 - i);
    }Resto = Soma * 10 % 11;

    if (Resto == 10 || Resto == 11) Resto = 0;
    if (Resto != parseInt(strCPF.substring(9, 10))) return false;

    Soma = 0;
    for (i = 1; i <= 10; i++) {
      Soma = Soma + parseInt(strCPF.substring(i - 1, i)) * (12 - i);
    }Resto = Soma * 10 % 11;

    if (Resto == 10 || Resto == 11) Resto = 0;
    if (Resto != parseInt(strCPF.substring(10, 11))) return false;
    return true;
  };

  $scope.limparFiltro = function () {
    $scope.filtro = {};
    $scope.filtro.cadInicial = null;
    $scope.filtro.cadFinal = null;
    $scope.filtro.cpf = null;
  };

  $scope.getApi = function (id) {
    //const page = parseInt($location.search().page) || 1
    var url = consts.apiUrl + '/apipronampe/' + id;

    $http.get(url).then(function (resp) {
      $scope.crms = resp.data;
      $scope.crm = {};
      tabs.show($scope, { tabList: true, tabCreate: true });
    }).catch(function (resp) {
      $scope.addAlert(resp.data);
    });
  };

  $scope.getPronampe = function (add) {
    var page = parseInt($location.search().page) || 1;
    var url = consts.apiUrl + '/pronampe';
    msgs.addInfo('Aguarde consulta sendo realizada!');

    $http.get(url).then(function (resp) {
      $scope.crms = resp.data;
      if (!add) {
        $scope.crm = {};
        tabs.show($scope, { tabList: true, tabCreate: true });
      }
    }).catch(function (resp) {
      //msgs.addError(resp.data)
      $scope.addAlert(resp.data);
    });
  };

  $scope.getLog = function (id) {
    var url = consts.apiUrl + '/logpronampe/' + id;
    $http.get(url).then(function (resp) {
      $scope.mensagens = resp.data;
    }).catch(function (resp) {
      $scope.addAlert(resp.data);
    });
  };

  $scope.create = function () {
    if (!$scope.validaEntradas()) {
      var url = consts.apiUrl + '/pronampe';

      $http.post(url, $scope.crm).then(function (resp) {
        console.log(resp.data);
        msgs.addSuccess('Operação realizada com sucesso!!');
        $scope.crm = {};
        $scope.getPronampe();
      }).catch(function (resp) {
        //msgs.addError(resp.data)
        $scope.addAlert(resp.data);
      });
    }
  };

  $scope.createLog = function () {
    var url = consts.apiUrl + '/logpronampe';
    $http.post(url, $scope.log).then(function (response) {
      $scope.getLog($scope.log.idPronampe);
      $scope.log = {};
    }).catch(function (resp) {
      $scope.addAlert(resp.data);
    });
  };

  $scope.enviar = function () {
    if (!$scope.validaEntradas()) {
      var urlToken = consts.apiUrl + '/token';
      msgs.addInfo('Aguarde consulta sendo realizada!');

      $http.get(urlToken).then(function (response) {
        var token = response.data.access_token;
        var url = consts.apiUrl + '/enviar/' + $scope.crm.id + '/' + token;

        $http.post(url, $scope.crm).then(function (response) {
          console.log(response.data);
          $scope.crm.numeroReservaPreValidacao = response.data.numeroReservaPreValidacao;
          $scope.crm.valorTotalFinanciado = response.data.valorTotalFinanciado;
          $scope.crm.status = 'Enviado';

          var url = consts.apiUrl + '/pronampe/' + $scope.crm.id;
          $http.patch(url, $scope.crm).then(function (response) {
            $scope.log.idPronampe = $scope.crm.id;
            $scope.log.status = $scope.crm.status;
            $scope.log.mensagem = "Envio realizado com sucesso!";
            $scope.createLog();
            $scope.crm = {};
            $scope.getPronampe();
            tabs.show($scope, { tabList: true, tabCreate: true });
            $scope.initTabCreate();
            msgs.addSuccess('Envio realizado com sucesso!');
          }).catch(function (resp) {
            //msgs.addError(resp.data)
            $scope.addAlert(resp.data);
            $scope.log.idPronampe = $scope.crm.id;
            $scope.log.status = "Erro salvar retorno";
            $scope.log.mensagem = resp.data;
            $scope.createLog();
          });
        }).catch(function (resp) {
          //msgs.addError(resp.data)
          $scope.addAlert(resp.data);
          $scope.log.idPronampe = $scope.crm.id;
          $scope.log.status = "Erro enviar Proname";
          $scope.log.mensagem = resp.data;
          $scope.createLog();
        });
      }).catch(function (resp) {
        //msgs.addError(resp.data)
        $scope.addAlert(resp.data);
        $scope.log.idPronampe = $scope.crm.id;
        $scope.log.status = "Erro buscar Token";
        $scope.log.mensagem = resp.data;
        $scope.createLog();
      });
    }
  };

  $scope.validaEntradas = function () {
    var ret = false;
    // for (var i = 0; i < $scope.alerts.length; i++) {
    //   $scope.alerts.splice(i, 1);
    // }
    $scope.alerts.splice(0, $scope.alerts.length);

    if ($scope.crm.dtCadastro == undefined) {
      var dt = new Date();
      $scope.crm.dtCadastro = dt.toISOString();
    }
    if (!Number.isInteger($scope.crm.idApi)) {
      $scope.addAlertValidade('Selecione a API!');
      ret = true;
    }
    if (!Number.isInteger($scope.crm.codigoFundoGarantidor)) {
      $scope.crm.codigoFundoGarantidor = 2;
    }
    if (!Number.isInteger($scope.crm.numeroAgenciaContratanteOperacao)) {
      $scope.crm.numeroAgenciaContratanteOperacao = 15;
    }
    if ($scope.crm.codigoIbgeMunicipioAgencia == undefined || $scope.crm.codigoIbgeMunicipioAgencia == '') {
      $scope.addAlertValidade('Código IBGE sem preencher!');
      ret = true;
    }
    if (!Number.isInteger($scope.crm.codigoTipoPessoa)) {
      $scope.addAlertValidade('Selecione Tipo de pessoa!');
      ret = true;
    }
    if ($scope.crm.codigoIdentificadorSrf == undefined) {
      $scope.addAlertValidade('CNPJ/CPF sem preencher!');
      ret = true;
    }
    /*if ($scope.crm.codigoIdentificadorSrf != undefined) {
      if ($scope.crm.codigoIdentificadorSrf.length > 12) {
        if ($scope.validarCNPJ($scope.crm.codigoIdentificadorSrf)) {
          $scope.addAlertValidade('CNPJ Inválido!')
          ret = true
        }
      } else {
        if ($scope.validarCPF($scope.crm.codigoIdentificadorSrf)) {
          $scope.addAlertValidade('CPF Inválido!')
          ret = true
        }
      }
    }*/
    if (!Number.isInteger($scope.crm.codigoTipoPublicoAlvo)) {
      $scope.addAlertValidade('Selecione o Tipo de Público Alvo!');
      ret = true;
    }
    if ($scope.crm.valorFaturamentoBrutoAnual == undefined) {
      $scope.addAlertValidade('Faturamento Bruto Anual sem preencher!');
      ret = true;
    }
    if ($scope.crm.valorOperacaoCredito == undefined || $scope.crm.valorOperacaoCredito == '') {
      $scope.addAlertValidade('Valor da Operação de Crédito sem preencher!');
      ret = true;
    }
    if ($scope.crm.percentualGarantiaOperacaoCredito == undefined || $scope.crm.percentualGarantiaOperacaoCredito == '') {
      $scope.addAlertValidade('% Garantia Operação Crédito sem preencher!');
      ret = true;
    }
    if (!Number.isInteger($scope.crm.codigoTipoModalidadeCredito)) {
      $scope.addAlertValidade('Selecione Código Tipo Modalidade Crédito!');
      ret = true;
    }
    if (!Number.isInteger($scope.crm.codigoTipoFinalidadeCredito)) {
      $scope.addAlertValidade('Selecione Código Tipo Finalidade Crédito!');
      ret = true;
    }
    if (!Number.isInteger($scope.crm.codigoTipoFonteRecurso)) {
      $scope.addAlertValidade('Selecione Código Tipo Fonte Recurso!');
      ret = true;
    }
    if (!Number.isInteger($scope.crm.codigoTipoProgramaCredito)) {
      $scope.addAlertValidade('Selecione Código Tipo Programa Crédito!');
      ret = true;
    }
    if ($scope.crm.dataFormalizacaoOperacao == undefined || $scope.crm.dataFormalizacaoOperacao == '') {
      var dt = new Date();
      $scope.crm.dataFormalizacaoOperacao = dt.toISOString();
    }
    if ($scope.crm.dataVencimentoOperacao == undefined || $scope.crm.dataVencimentoOperacao == '') {
      $scope.addAlertValidade('Data de Vencimento Operação sem preencher!');
      ret = true;
    }
    if (!Number.isInteger($scope.crm.codigoTipoCronogramaAmortizacao)) {
      $scope.addAlertValidade('Selecione Código Tipo Cronograma Amortizacao!');
      ret = true;
    }
    if (!Number.isInteger($scope.crm.codigoTipoCondicaoEspecial)) {
      $scope.addAlertValidade('Selecione Código Tipo Condição Especial!');
      ret = true;
    }
    if (!Number.isInteger($scope.crm.codigoTipoFormalizacao)) {
      $scope.addAlertValidade('Selecione Código Tipo Formalização!');
      ret = true;
    }

    // regras de negócio
    if (Number.isInteger($scope.crm.codigoTipoPublicoAlvo) && ($scope.crm.valorFaturamentoBrutoAnual != undefined || $scope.crm.valorFaturamentoBrutoAnual != '')) {
      if ($scope.crm.codigoTipoPublicoAlvo == 1 && $scope.crm.valorFaturamentoBrutoAnual > 360000) {
        $scope.addAlert('Para a opção Micro Empresa o faturamento Anual Bruto não pode exeder a R$ 360.000,00!');
        ret = true;
      }
    }

    // regra data vencimento
    return ret;
  };

  $scope.showTabUpdate = function (crm) {
    $scope.crm = crm;
    $scope.getLog(crm.id);
    tabs.show($scope, { tabUpdate: true, tabLista: true });
  };

  $scope.showTabDelete = function (crm) {
    $scope.crm = crm;
    tabs.show($scope, { tabDelete: true });
  };

  $scope.cancel = function () {
    tabs.show($scope, { tabList: true, tabCreate: true });
    $scope.alerts.splice(0, $scope.alerts.length);
    $scope.crm = {};
    $scope.log = {};
    $scope.mensagens = {};
    $scope.initTabCreate();
  };

  $scope.update = function () {
    $scope.alerts.splice(0, $scope.alerts.length);
    var url = consts.apiUrl + '/pronampe/' + $scope.crm.id;
    $http.patch(url, $scope.crm).then(function (response) {
      //$scope.crm = {}
      $scope.getPronampe('true');
      //tabs.show($scope, { tabList: true, tabCreate: true })
      msgs.addSuccess('Atualização realizada com sucesso!');
    }).catch(function (resp) {
      //msgs.addError(resp.data)
      $scope.addAlert(resp.data);
    });
  };

  $scope.delete = function () {
    $scope.alerts.splice(0, $scope.alerts.length);
    var url = consts.apiUrl + '/pronampe/' + $scope.crm.id;
    $http.delete(url, $scope.crm).then(function (response) {
      $scope.crm = {};
      $scope.getPronampe();
      tabs.show($scope, { tabList: true, tabCreate: true });
      msgs.addSuccess('Exclusão realizada com sucesso!');
    }).catch(function (resp) {
      //msgs.addError(resp.data)
      $scope.addAlert(resp.data);
    });
  };

  $scope.getPronampe();
}
'use strict';

projeto.controller('peacCtrl', ['$scope', '$http', '$location', '$rootScope', 'auth', 'listas', 'msgs', 'tabs', 'consts', peacController]);

function peacController($scope, $http, $location, $rootScope, auth, listas, msgs, tabs, consts) {
  var vm = this;
  vm.alerts = [];
  vm.filtro = {};
  vm.log = {};

  //Init
  vm.initTabCreate = function () {};

  vm.getName = function (list, name) {
    var ret = 0;
    for (var i = 0; i < list.length; i++) {
      if (list[i].name == name) {
        ret = list[i].id;
        break;
      }
    }
    return ret;
  };

  vm.addAlert = function (mensagem) {
    vm.alerts.push({ msg: JSON.stringify(mensagem) });
    //jsonStr.replace("","/({|}[,]*|[^{}:]+:[^{}:,]*[,{]*)/g")
  };

  vm.addAlertValidade = function (mensagem) {
    vm.alerts.push({ type: 'warning', msg: mensagem });
  };

  vm.closeAlert = function (index) {
    vm.alerts.splice(index, 1);
  };

  vm.getProduto = function () {
    var page = parseInt($location.search().page) || 1;
    var url = consts.apiUrl + '/produto';
    msgs.addInfo('Aguarde consulta sendo realizada!');

    $http.get(url).then(function (resp) {
      vm.crms = resp.data;
      vm.crm = {};
      tabs.show(vm, { tabList: true, tabCreate: true });
    }).catch(function (resp) {
      vm.addAlert(resp.data);
    });
  };

  vm.create = function () {
    if (!vm.validaEntradas()) {
      var url = consts.apiUrl + '/produto';

      $http.post(url, vm.crm).then(function (resp) {
        console.log(resp.data);
        msgs.addSuccess('Operação realizada com sucesso!!');
        vm.crm = {};
        vm.getProduto();
      }).catch(function (resp) {
        //msgs.addError(resp.data)
        vm.addAlert(resp.data);
      });
    }
  };

  vm.cancel = function () {
    tabs.show(vm, { tabList: true, tabCreate: true });
    vm.alerts.splice(0, vm.alerts.length);
    vm.crm = {};
    vm.mensagens = {};
    vm.initTabCreate();
  };

  vm.update = function () {
    vm.alerts.splice(0, vm.alerts.length);
    var url = consts.apiUrl + '/produto/' + vm.crm.id;
    $http.patch(url, vm.crm).then(function (response) {
      //vm.crm = {}
      vm.getProduto('true');
      //tabs.show(vm, { tabList: true, tabCreate: true })
      msgs.addSuccess('Atualização realizada com sucesso!');
    }).catch(function (resp) {
      //msgs.addError(resp.data)
      vm.addAlert(resp.data);
    });
  };

  vm.delete = function () {
    vm.alerts.splice(0, vm.alerts.length);
    var url = consts.apiUrl + '/produto/' + vm.crm.id;
    $http.delete(url, vm.crm).then(function (response) {
      vm.crm = {};
      vm.getProduto();
      tabs.show(vm, { tabList: true, tabCreate: true });
      msgs.addSuccess('Exclusão realizada com sucesso!');
    }).catch(function (resp) {
      vm.addAlert(resp.data);
    });
  };

  vm.validaEntradas = function () {
    var ret = false;
    // for (var i = 0; i < vm.alerts.length; i++) {
    //   vm.alerts.splice(i, 1);
    // }
    vm.alerts.splice(0, vm.alerts.length);

    if (vm.crm.dtCadastro == undefined) {
      var dt = new Date();
      vm.crm.dtCadastro = dt.toISOString();
    }
    if (isNaN(vm.crm.idApi)) {
      vm.addAlertValidade('Selecione a API!');
      ret = true;
    }
    if (isNaN(vm.crm.modalidade)) {
      vm.addAlertValidade('Selecione Modalidade da Operação!');
      ret = true;
    }
    if (isNaN(vm.crm.cnpjClienteFinal)) {
      vm.addAlertValidade('CNPJ do Cliente sem preencher!');
      ret = true;
    }
    if (vm.crm.razaoSocialClienteFinal == undefined || vm.crm.razaoSocialClienteFinal == '') {
      vm.addAlertValidade('Razão Social do Cliente sem preencher!');
      ret = true;
    }
    if (isNaN(vm.crm.cep)) {
      vm.addAlertValidade('CEP sem preencher!');
      ret = true;
    }
    if (vm.crm.nomeLogradouro == undefined || vm.crm.nomeLogradouro == '') {
      vm.addAlertValidade('Logradouro sem preencher!');
      ret = true;
    }
    if (vm.crm.numeroLogradouro == undefined || vm.crm.numeroLogradouro == '') {
      vm.addAlertValidade('Número sem preencher!');
      ret = true;
    }
    if (vm.crm.complemento == undefined || vm.crm.complemento == '') {
      vm.addAlertValidade('Complemento sem preencher!');
      ret = true;
    }
    if (vm.crm.nomeBairro == undefined || vm.crm.nomeBairro == '') {
      vm.addAlertValidade('Bairro sem preencher!');
      ret = true;
    }
    if (vm.crm.cidade == undefined || vm.crm.cidade == '') {
      vm.addAlertValidade('Cidade sem preencher!');
      ret = true;
    }
    if (vm.crm.codigoIbgeMunicipio == undefined || vm.crm.codigoIbgeMunicipio == '') {
      vm.addAlertValidade('Código IBGE do Cliente sem preencher!');
      ret = true;
    }
    if (isNaN(vm.crm.cnaeClienteFinal)) {
      vm.addAlertValidade('CNAE do Cliente sem preencher!');
      ret = true;
    }
    if (isNaN(vm.crm.cnaePortariaGrandeEmpresa)) {
      vm.addAlertValidade('CNAE da Portaria Grande Empresa sem preencher!');
      ret = true;
    }
    if (isNaN(vm.crm.naturezaClienteFinal)) {
      vm.addAlertValidade('Selecione Natureza do Cliente!');
      ret = true;
    }
    if (isNaN(vm.crm.valorOperacao)) {
      vm.addAlertValidade('Selecione Valor da Operação!');
      ret = true;
    }
    if (vm.crm.ecgDeveSerSomadoAoValorOperacao == undefined || vm.crm.ecgDeveSerSomadoAoValorOperacao == '') {
      vm.addAlertValidade('Selecione ECG deve ser somado a operação!');
      ret = true;
    }
    if (vm.crm.dataContratacao == undefined || vm.crm.dataContratacao == '') {
      vm.addAlertValidade('Data Contratação sem preencher!');
      ret = true;
    }
    if (vm.crm.dataPrimeiraLiberacao == undefined || vm.crm.dataPrimeiraLiberacao == '') {
      vm.addAlertValidade('Data 1a. Liberação sem preencher!');
      ret = true;
    }
    if (isNaN(vm.crm.valorPrimeiraLiberacao)) {
      vm.addAlertValidade('Vlr 1a. LIberação sem preencher!');
      ret = true;
    }
    if (isNaN(vm.crm.indexadorTaxaJuros)) {
      vm.addAlertValidade('Selecione o Indexador Taxas de Juros!');
      ret = true;
    }
    if (isNaN(vm.crm.percentualIndexador)) {
      vm.addAlertValidade('Preencha Percentual do Indexador!');
      ret = true;
    }
    if (isNaN(vm.crm.taxaEfetivaAnual)) {
      vm.addAlertValidade('Preencha Taxa Efetuva Anual!');
      ret = true;
    }
    if (vm.crm.riscoOperacao == undefined || vm.crm.riscoOperacao == '') {
      vm.addAlertValidade('Selecione a Classif. Risco da Operação!');
      ret = true;
    }
    if (isNaN(vm.crm.receitaBrutaClienteFinal)) {
      vm.addAlertValidade('Preencha a Receita Bruta!');
      ret = true;
    }
    if (vm.crm.tipoReceitaBruta == undefined || vm.crm.tipoReceitaBruta == '') {
      vm.addAlertValidade('Selecione o Tipo Receira Bruta!');
      ret = true;
    }
    if (vm.crm.dataReferenciaReceitaBruta == undefined || vm.crm.dataReferenciaReceitaBruta == '') {
      vm.addAlertValidade('Preencha a Data Referência Receita!');
      ret = true;
    }
    if (isNaN(vm.crm.tipoGarantia)) {
      vm.addAlertValidade('Selecione o Tipo de Garantia!');
      ret = true;
    }
    if (vm.crm.dataAmortizacao == undefined || vm.crm.dataAmortizacao == '') {
      vm.addAlertValidade('Preencha a Data Amortização!');
      ret = true;
    }

    // regras de negócio

    return ret;
  };

  vm.showTabUpdate = function (crm) {
    vm.crm = crm;
    tabs.show(vm, { tabUpdate: true, tabLista: true });
  };

  vm.showTabDelete = function (crm) {
    vm.crm = crm;
    tabs.show(vm, { tabDelete: true });
  };

  vm.getProduto();
}
'use strict';

projeto.component('authField', {
	bindings: {
		id: '@',
		label: '@',
		type: '@',
		grid: '@',
		icon: '@',
		model: '=',
		placeholder: '@',
		hide: '<'
	},
	controller: function controller() {
		var _this = this;

		this.$onInit = function () {
			_this.iconClasses = 'glyphicon glyphicon-' + _this.icon + ' form-control-feedback';
		};
	},
	template: '\n\t\t<div class="form-group has-feedback">\n\t\t\t<input ng-model="$ctrl.model" id="{{ $ctrl.id }}" \n\t\t\t          class="form-control"\n\t\t\t           type="{{ $ctrl.type }}" \n\t\t\t    placeholder="{{ $ctrl.placeholder }}"\n\t\t\t        ng-hide="$ctrl.hide" />\n\t\t\t<span ng-hide="$ctrl.hide" class="{{ $ctrl.iconClasses }}"></span>\n\t\t</div>\n\t'
});
'use strict';

projeto.component('comboBox', {
  bindings: {
    id: '@',
    label: '@',
    grid: '@',
    model: '=',
    lista: '=',
    readonly: '<'
  },
  controller: ['gridSystem', function (gridSystem) {
    //this.$onInit = () => this.gridClasses = gridSystem.toCssClasses(this.grid)

    this.$onInit = function () {
      this.gridClasses = gridSystem.toCssClasses(this.grid);
    };
  }],
  template: '\n    <div class="{{ $ctrl.gridClasses }}">\n      <div class="form-group">\n        <label id="{{ $ctrl.id }}">{{ $ctrl.label }}</label>\n        <select ng-model="$ctrl.model" class="form-control" ng-readonly="$ctrl.readonly">\n            <option value=""> Selecione </option>\n            <option ng-repeat="item in $ctrl.lista" value="{{item.name}}">{{item.name}}</option>\n        </select>\n      </div>    \n    </div>\n  '
});
'use strict';

projeto.component('contentHeader', {
   bindings: {
      name: '@',
      small: '@'
   },
   template: '\n      <section class="content-header">\n        <h1>{{ $ctrl.name }} <small>{{ $ctrl.small }}</small></h1>\n      </section>\n   '
});
'use strict';

projeto.component('field', {
  bindings: {
    id: '@',
    label: '@',
    type: '@',
    grid: '@',
    model: '=',
    placeholder: '@',
    mask: '@',
    readonly: '<',
    param: '='
  },
  controller: ['$scope', 'msgs', 'gridSystem', 'LocalizacaoService', function ($scope, msgs, gridSystem, LocalizacaoService) {
    var _this = this;

    this.$onInit = function () {
      return _this.gridClasses = gridSystem.toCssClasses(_this.grid);
    };

    this.DateTime = function (arg) {
      if (arg == "Data") {
        this.model = new Date();
      } else {
        var hora = new Date();
        this.model = hora.format("isoTime");
      }
    };

    this.getLocation = function (end) {
      //console.log('comp end: ' + JSON.stringify(endereco))
      //console.log('comp data: ' + JSON.stringify(resp.data))
      //console.log('comp location: ' + JSON.stringify($scope.location))
      //console.log('comp location: ' + $scope.location[0].geometry.location.lat + ', ' + $scope.location[0].geometry.location.lng)

      msgs.addInfo('Relizando consulta das coordenadas...');
      var endereco = end.logradouro + ',' + end.complemento + ',' + end.bairro + ',' + end.cidade + ',' + end.estado + ',' + end.cep;
      LocalizacaoService.get(endereco).then(function (resp) {
        $scope.location = resp.data.results;
        if ($scope.location.length > 0) {
          this.model = $scope.location[0].geometry.location.lat + ', ' + $scope.location[0].geometry.location.lng;
        } else {
          msgs.addWarning('Coordenadas não foram localizadas verifique o endereço e refaça a consulta.');
        }
      });
    };
  } //end - function
  ],
  template: '\n   <div class="{{ $ctrl.gridClasses }}">\n     <div class="form-group">\n       <label for="{{ $ctrl.id }}">{{ $ctrl.label }}</label>\n            <div ng-if="$ctrl.mask == null ? true : false">\n              <input ng-model="$ctrl.model" id="{{ $ctrl.id }}" class="form-control"\n                     type="{{ $ctrl.type }}" placeholder="{{ $ctrl.placeholder }}"\n                     ng-readonly="$ctrl.readonly" />\n            </div>\n\n            <div ng-if="$ctrl.mask == \'cep\' ? true : false">\n              <input ng-model="$ctrl.model" id="{{ $ctrl.id }}" class="form-control"\n                     type="{{ $ctrl.type }}" placeholder="{{ $ctrl.placeholder }}"\n                     ng-readonly="$ctrl.readonly" ng-cep-validator ui-br-cep-mask />\n            </div>\n            \n            <div ng-if="$ctrl.mask == \'cpf\' ? true : false">\n              <input ng-model="$ctrl.model" id="{{ $ctrl.id }}" class="form-control"\n                     type="{{ $ctrl.type }}" placeholder="{{ $ctrl.placeholder }}"\n                     ng-readonly="$ctrl.readonly" ui-br-cpf-mask />\n            </div>\n\n            <div ng-if="$ctrl.mask == \'cpfcnpj\' ? true : false">\n              <input ng-model="$ctrl.model" id="{{ $ctrl.id }}" class="form-control"\n                     type="{{ $ctrl.type }}" placeholder="{{ $ctrl.placeholder }}"\n                     ng-readonly="$ctrl.readonly" ui-br-cpfcnpj-mask />\n            </div>\n\n            <div ng-if="$ctrl.mask == \'telefone\' ? true : false">\n              <input ng-model="$ctrl.model" id="{{ $ctrl.id }}" class="form-control"\n                     type="{{ $ctrl.type }}" placeholder="{{ $ctrl.placeholder }}"\n                     ng-readonly="$ctrl.readonly" ui-br-phone-number />\n            </div>\n\n            <div ng-if="$ctrl.mask == \'numero\' ? true : false">\n              <input ng-model="$ctrl.model" id="{{ $ctrl.id }}" class="form-control"\n                     type="{{ $ctrl.type }}" placeholder="{{ $ctrl.placeholder }}"\n                     ng-readonly="$ctrl.readonly" ui-number-mask="2" />\n            </div>\n\n            <div ng-if="$ctrl.mask == \'inteiro\' ? true : false">\n              <input ng-model="$ctrl.model" id="{{ $ctrl.id }}" class="form-control"\n                     type="{{ $ctrl.type }}" placeholder="{{ $ctrl.placeholder }}"\n                     ng-readonly="$ctrl.readonly" ui-number-mask="0" />\n            </div>\n\n            <div ng-if="$ctrl.mask == \'perc\' ? true : false">\n              <input ng-model="$ctrl.model" id="{{ $ctrl.id }}" class="form-control"\n                     type="{{ $ctrl.type }}" placeholder="{{ $ctrl.placeholder }}"\n                     ng-readonly="$ctrl.readonly" ui-percentage-mask="4" />\n            </div>\n\n            <div ng-if="$ctrl.mask == \'data\' ? true : false">\n              <div class="input-group">\n                <div class="input-group-addon">\n                  <i class="fa fa-calendar" ng-click="$ctrl.DateTime(\'Data\');"></i>\n                </div>\n                <input ng-model="$ctrl.model" id="{{ $ctrl.id }}" class="form-control pull-right"\n                     type="{{ $ctrl.type }}" placeholder="{{ $ctrl.placeholder }}"\n                     ng-readonly="$ctrl.readonly" ui-date-mask="DD/MM/YYYY" />\n              </div>\n            </div>\n\n            <div ng-if="$ctrl.mask == \'time\' ? true : false">\n              <div class="input-group">\n                <div class="input-group-addon">\n                  <i class="fa fa-clock-o" ng-click="$ctrl.DateTime(\'Time\');"></i>\n                </div>\n                <input ng-model="$ctrl.model" id="{{ $ctrl.id }}" class="form-control pull-right"\n                     type="{{ $ctrl.type }}" placeholder="{{ $ctrl.placeholder }}"\n                     ng-readonly="$ctrl.readonly" ui-time-mask />\n              </div>\n            </div>\n\n            <div ng-if="$ctrl.mask == \'data2\' ? true : false">\n              <input ng-model="$ctrl.model" id="{{ $ctrl.id }}" class="form-control"\n                     type="{{ $ctrl.type }}" placeholder="{{ $ctrl.placeholder }}"\n                     ng-readonly="$ctrl.readonly" ui-date-mask="DD-MM-YYYY" />\n            </div>\n\n            <div ng-if="$ctrl.mask == \'time2\' ? true : false">\n              <input ng-model="$ctrl.model" id="{{ $ctrl.id }}" class="form-control"\n                     type="{{ $ctrl.type }}" placeholder="{{ $ctrl.placeholder }}"\n                     ng-readonly="$ctrl.readonly" ui-time-mask="short" />\n            </div>\n\n            <div ng-if="$ctrl.mask == \'location\' ? true : false">\n              <div class="input-group">\n                <div class="input-group-addon">\n                  <i class="fa fa-search" ng-click="$ctrl.getLocation($ctrl.param)"></i>\n                </div>\n                <input ng-model="$ctrl.model" id="{{ $ctrl.id }}" class="form-control pull-right"\n                       type="{{ $ctrl.type }}" placeholder="{{ $ctrl.placeholder }}" ng-readonly="$ctrl.readonly" />\n              </div>\n            </div>\n\n\n     </div>\n   </div>\n  '
});

/*
  REFATORAR COM SWITCH

  template: `
   <div class="{{ $ctrl.gridClasses }}">
     <div class="form-group">
       <label for="{{ $ctrl.id }}">{{ $ctrl.label }}</label>
       <input ng-model="$ctrl.model" id="{{ $ctrl.id }}" class="form-control"
          type="{{ $ctrl.type }}" placeholder="{{ $ctrl.placeholder }}"
          ng-readonly="$ctrl.readonly" {{$ctrl.mask}}="" />
     </div>
   </div>
  `
*/
'use strict';

projeto.component('paginator', {
  bindings: {
    url: '@',
    pages: '@'
  },
  controller: ['$location', function ($location) {
    this.$onInit = function () {
      var pages = parseInt(this.pages) || 1;
      this.pagesArray = Array(pages).fill(0).map(function (e, i) {
        return i + 1;
      });

      this.current = parseInt($location.search().page) || 1;
      this.needPagination = this.pages > 1;
      this.hasPrev = this.current > 1;
      this.hasNext = this.current < this.pages;

      this.isCurrent = function (i) {
        return this.current == i;
      };
    };
  }],
  template: '\n      <ul ng-if="$ctrl.needPagination"\n        class="pagination pagination-sm no-margin pull-right">\n        <li ng-if="$ctrl.hasPrev">\n          <a href="{{ $ctrl.url }}?page={{ $ctrl.current - 1}}">\xAB</a>\n        </li>\n        <li ng-class="{active: $ctrl.isCurrent(i)}"\n          ng-repeat="i in $ctrl.pagesArray">\n          <a href="{{ $ctrl.url }}?page={{ i }}">{{ i }}</a>\n        </li>\n        <li ng-if="$ctrl.hasNext">\n          <a href="{{ $ctrl.url }}?page={{ $ctrl.current + 1}}">\xBB</a>\n        </li>\n      </ul>\n   '
});

/*

(function() {
  'use strict'
  angular.module('myApp').component('paginator', {
    bindings: {
      url: '@',
      pages: '@',
    },
    controller: [
      '$location',
      function($location) {
        this.$onInit = function() {
         var pages = parseInt(this.pages) || 1;
         this.pagesArray = Array(pages).fill(0).map((e, i) => i + 1);
          this.current = parseInt($location.search().page) || 1;
          this.needPagination = this.pages > 1;
          this.hasPrev = this.current > 1;
          this.hasNext = this.current < this.pages;
          this.isCurrent = function(i) {
            return this.current == i
          }
        }
    }],
    template: `
       <ul ng-if="$ctrl.needPagination"
         class="pagination pagination-sm no-margin pull-right">
         <li ng-if="$ctrl.hasPrev">
           <a href="{‌{ $ctrl.url }}?page={‌{ $ctrl.current - 1 }}">«</a>
         </li>
         <li ng-class="{active: $ctrl.isCurrent(i)}"
           ng-repeat="i in $ctrl.pagesArray">
           <a href="{‌{ $ctrl.url }}?page={‌{ i }}">{‌{ i }}</a>
         </li>
         <li ng-if="$ctrl.hasNext">
           <a href="{‌{ $ctrl.url }}?page={‌{ $ctrl.current + 1 }}">»</a>
         </li>
       </ul>
    `
 });
})()

*/
'use strict';

projeto.component('valueBox', {
  bindings: {
    grid: '@',
    colorClass: '@',
    value: '@',
    text: '@',
    iconClass: '@'
  },
  controller: ['gridSystem', function (gridSystem) {
    var _this = this;

    //vai executar depois de garantir inicialização das variaveis
    //this.$onInit = function () {
    this.$onInit = function () {
      return _this.gridClasses = gridSystem.toCssClasses(_this.grid);
    };
  }],
  template: '\n  <div class="{{ $ctrl.gridClasses }}">\n    <div class="small-box {{ $ctrl.colorClass }}">\n      <div class="inner">\n        <h3>{{ $ctrl.value }}</h3>\n        <p>{{ $ctrl.text }}</p>\n      </div>\n      <div class="icon">\n        <i class="{{ $ctrl.iconClass }}"></i>\n      </div>\n    </div>\n  </div>\n  '
});
'use strict';

projeto.directive('ngBlur', function () {
    return {
        restrict: 'A',
        require: 'ngModel',
        link: function link($scope, $element, $attrs, ngModel) {
            $element.on('blur', function () {
                if (ngModel.$invalid) {
                    $element.addClass('error');
                } else {
                    $element.removeClass('error');
                }
            });
        }
    };
});
'use strict';

projeto.directive('ngCepValidator', function (CepService, $rootScope, msgs) {
    return {
        restrict: 'A',
        require: 'ngModel',
        link: function link($scope, $element, $attrs, ngModel) {
            $scope.$watch($attrs.ngModel, function (value) {
                if (value) {
                    if (value.match(/^[0-9]{5}-[0-9]{3}$/)) {
                        msgs.addInfo('Relizando consulta do CEP...');
                        CepService.get(value).then(function (response) {
                            if (response) {
                                $rootScope.$broadcast('cep', response.data);
                            }
                        });
                        ngModel.$setValidity($attrs.ngModel, true);
                    } else {
                        ngModel.$setValidity($attrs.ngModel, false);
                    }
                } else {
                    ngModel.$setValidity($attrs.ngModel, false);
                }
            });
        }
    };
});
'use strict';

projeto.directive('ckEditor', function () {
  return {
    require: '?ngModel',
    link: function link(scope, elm, attr, ngModel) {
      var ck = CKEDITOR.replace(elm[0]);
      if (!ngModel) return;
      ck.on('instanceReady', function () {
        ck.setData(ngModel.$viewValue);
      });
      function updateModel() {
        scope.$apply(function () {
          ngModel.$setViewValue(ck.getData());
        });
      }
      ck.on('change', updateModel);
      ck.on('key', updateModel);
      ck.on('dataReady', updateModel);

      ngModel.$render = function (value) {
        ck.setData(ngModel.$viewValue);
      };
    }
  };
});
'use strict';

projeto.factory('auth', ['$http', '$rootScope', 'consts', AuthFactory]);

function AuthFactory($http, $rootScope, consts) {

    var user = null;

    function signup(user, callback) {
        submit('signup', user, callback);
    }

    function login(user, callback) {
        submit('login', user, callback);
    }

    function altSenha(user, callback) {
        submit('altSenha', user, callback);
    }

    function submit(url, user, callback) {
        $http.post(consts.oapiUrl + '/' + url, user).then(function (resp) {
            localStorage.setItem(consts.userKey, JSON.stringify(resp.data));
            $http.defaults.headers.common.Authorization = resp.data.token;
            if (callback) callback(null, resp.data);
        }).catch(function (resp) {
            //console.log('submit :' + resp.data.errors)
            user = null;
            localStorage.removeItem(consts.userKey);
            if (callback) callback(resp.data.errors, resp.data);
        });
    }

    function logout(callback) {
        user = null;
        localStorage.removeItem(consts.userKey);
        $http.defaults.headers.common.Authorization = '';
        if (callback) callback(null);
    }

    function validateToken(token, callback) {
        if (token) {
            $http.post(consts.oapiUrl + '/validateToken', { token: token }).then(function (resp) {
                if (!resp.data.valid) {
                    logout();
                } else {
                    $http.defaults.headers.common.Authorization = getUser().token;
                }
                if (callback) callback(null, resp.data.valid);
            }).catch(function (resp) {
                if (callback) callback(resp.data.errors);
            });
        } else {
            if (callback) callback('Token inválido.');
        }
    }

    function getUser() {
        if (!user) {
            user = JSON.parse(localStorage.getItem(consts.userKey));
            //console.log('getUser :' + JSON.stringify(user))
        }
        return user;
    }

    return { signup: signup, login: login, logout: logout, validateToken: validateToken, altSenha: altSenha, getUser: getUser };
}
'use strict';

projeto.factory('gridSystem', [function () {

  function toCssClasses(numbers) {
    var cols = numbers ? numbers.split(' ') : [];
    var classes = '';

    if (cols[0]) classes += 'col-xs-' + cols[0];
    if (cols[1]) classes += ' col-sm-' + cols[1];
    if (cols[2]) classes += ' col-md-' + cols[2];
    if (cols[3]) classes += ' col-lg-' + cols[3];

    return classes;
  }

  return { toCssClasses: toCssClasses };
}]);
'use strict';

projeto.factory('handleResponseError', ['$q', '$window', 'consts', HandleResponseErrorFactory]);

function HandleResponseErrorFactory($q, $window, consts) {
	function responseError(errorResponse) {
		if (errorResponse.status === 403) {
			localStorage.removeItem(consts.userKey);
			$window.location.href = '/';
		}
		return $q.reject(errorResponse);
	}
	return { responseError: responseError };
}
'use strict';

projeto.factory('listas', ['$http', '$q', '$rootScope', 'auth', 'consts', ListasFactory]);

function ListasFactory($http, $q, $rootScope, auth, consts) {

	/*
 	Hortaliças: almeirão, aspargo, cebola, alho, couve, espinhafre, feijão, ervilha, cenoura, alface, abobrinha, cebolinha.
 	Frutas: uvas, manga, maçãs, laranjas, pêra, banana, kiwi, tomate, ameixa.
 	Galináceos: galinhas, ovos.
 	Suínos: carne de porco
 	Apicultura: mel, favo de mel, geléia real.
 */

	var categoriaProduto = [{ id: 1, name: 'Hortaliças' }, { id: 2, name: 'Frutas' }, { id: 3, name: 'Galináceos' }, { id: 4, name: 'Suínos' }, { id: 5, name: 'Apicultura' }, { id: 6, name: 'Outro' }];

	var status = [{ id: 1, name: 'Não Enviado' }, { id: 2, name: 'Verifique Log' }, { id: 3, name: 'Enviado' }];

	var linhaCredito = [{ id: 1, name: 'Pré-Validar FORMALIZAÇÃO de Crédito COM Reserva' }, { id: 2, name: 'Pré-Validar FORMALIZAÇÃO de Crédito SEM Reserva' }, { id: 3, name: 'CANCELAR Reserva de Pré-validação' }];

	var codigoFundoGarantidor = [{ id: 1, name: 'FGO Original' }, { id: 2, name: 'FGO PRONAMPE' }];

	var codigoTipoPessoa = [{ id: 1, name: 'Pessoa física' }, { id: 2, name: 'Pessoa jurídica' }];

	var codigoTipoPublicoAlvo = [{ id: 1, name: 'Micro empresa' }, { id: 2, name: 'Micro empreendedor individual' }, { id: 3, name: 'Autônomo transportador rodoviário de cargas' }, { id: 4, name: 'Pequena empresa' }];

	/* info
 valorOperacaoCredito*	number($float)
 example: 50000
 Valor da operação:
 - Se crédito fixo, informe o valor financiado;
 - Se crédito rotativo, informe o limite de crédito contratado.
 */

	var codigoTipoModalidadeCredito = [{ id: 1, name: 'Crédito fixo' }, { id: 2, name: 'Crédito rotativo' }];

	var codigoTipoFinalidadeCredito = [{ id: 1, name: 'Investimento' }, { id: 2, name: 'Capital de giro' }];

	var codigoTipoFonteRecurso = [{ id: 1, name: 'Fundo de Amparo ao Trabalhador' }, { id: 2, name: 'Programa de Formação do Patrimônio Setor Público' }, { id: 3, name: 'Conta Própria BB + PASEP' }, { id: 4, name: 'Conta Própria BB' }, { id: 5, name: 'BNDES' }, { id: 6, name: 'Conta Própria AGE-RIO' }, { id: 7, name: 'PIS CAIXA' }, { id: 8, name: 'Conta própria CAIXA' }, { id: 9, name: 'FINEP' }, { id: 10, name: 'Desenvolve SP (DSP)' }, { id: 11, name: 'Recurso próprio' }];

	var codigoTipoProgramaCredito = [{ id: 1, name: 'Proger Urbano Empresarial' }, { id: 2, name: 'Proger Turismo Investimento' }, { id: 3, name: 'BB Capital de Giro Mix PASEP' }, { id: 4, name: 'BB Giro Rápido PASEP/Conta Própria - Crédito Fixo' }, { id: 5, name: 'BB Giro APL' }, { id: 6, name: 'BB Giro Décimo Terceiro Salário' }, { id: 7, name: 'BB Giro Saúde Mix PASEP' }, { id: 8, name: 'BB Giro Empresa Flex' }, { id: 9, name: 'BB Giro Empresa Flex - Liberações Estruturadas' }, { id: 10, name: 'BB Giro Rápido' }, { id: 11, name: 'BB Crédito Empresa' }, { id: 12, name: 'BNDES Automático PER' }, { id: 13, name: 'Reescalonamento de Dívidas MPE' }, { id: 14, name: 'BB Giro Cartões' }, { id: 15, name: 'ASSUNÇÃO DE DÍVIDA DE MPE TESTE' }, { id: 16, name: 'BB Crédito Parcelado PJ' }, { id: 17, name: 'FAT Turismo Capital de Giro' }, { id: 18, name: 'AGERIO APL LICENCIAMENTO AMBIENTAL SELIC' }, { id: 19, name: 'DSP INVESTIMENTO' }, { id: 20, name: 'DSP MAQUINAS E EQUIPAMENTOS' }, { id: 21, name: 'DSP INOVACAO' }, { id: 22, name: 'FINEP INOVACAO' }, { id: 23, name: 'AGE-RIO APL LICENCIAMENTO AMBIENTAL SELIC' }, { id: 24, name: 'AGE-RIO ECOEFICIENCIA' }, { id: 25, name: 'AGE-RIO GIRO EMERGENCIAL' }, { id: 26, name: 'AGE-RIO GIRO FACIL' }, { id: 27, name: 'AGE-RIO GIRO SELIC' }, { id: 28, name: 'AGE-RIO INVESTIMENTO FIXO SELIC' }, { id: 29, name: 'AGE-RIO LOCADORAS DE VEICULOS' }, { id: 30, name: 'AGE-RIO TURISMO - HOTEIS' }, { id: 31, name: 'AGE-RIO FRANQUIAS' }, { id: 32, name: 'FAT TURISMO INVESTIMENTO' }, { id: 33, name: 'RENEGOCIACAO MASSIFICADA PF/PJ' }, { id: 34, name: 'RENEGOCIACAO ESPECIAL' }, { id: 35, name: 'CARTAO BNDES' }, { id: 36, name: 'CAIXA CREDITO PARCELADO PJ' }, { id: 37, name: 'CAIXA INVESTIMENTO PJ' }, { id: 38, name: 'CAIXA CREDITO ESPECIAL EMPRESA' }, { id: 39, name: 'PRONAMPE' }];

	var codigoTipoCronogramaAmortizacao = [{ id: 1, name: 'Cronogramas unificados' }, { id: 2, name: 'Cronogramas independentes' }];

	var codigoTipoCondicaoEspecial = [{ id: 1, name: 'Sem condição especial' }, { id: 2, name: 'BNDES/PER - Programa Emergencial de Recuperação' }, { id: 3, name: 'Micro empreendedor individual com deficiência' }];

	var codigoTipoFormalizacao = [{ id: 1, name: 'Ordinária' }, { id: 2, name: 'Novação de dívida(s)' }];

	var perfis = [{ name: 'Comprar' }, { name: 'Vender' }, { name: 'Alugar' }, { name: 'Investir' }];

	var cores = [{ name: 'blue' }, { name: 'yellow' }, { name: 'orange' }, { name: 'grey' }, { name: 'green' }, { name: 'white' }];

	var atendimentos = [{ name: 'Informação', icon: 'fa fa-info-circle bg-green' }, { name: 'Telefonei', icon: 'fa fa-phone bg-green' }, { name: 'Enviei SMS', icon: 'glyphicon glyphicon-send bg-green' }, { name: 'Enviei Email', icon: 'fa fa-envelope-o bg-green' }, { name: 'Enviei WhatsApp', icon: 'fa fa-whatsapp bg-green' }, { name: 'Agendei Visita', icon: 'fa fa-car bg-green' }, { name: 'Cliente Ligou', icon: 'fa fa-phone bg-green' }, { name: 'Cliente foi ao Stand', icon: 'fa fa-home bg-green' }, { name: 'Recebi Visita do Cliente', icon: 'fa fa-home bg-green' }, { name: 'Skype', icon: 'fa fa-skype bg-green' }];

	var tarefas = [{ name: 'Agendar Visita', icon: 'fa fa-car bg-red' }, { name: 'Enviar Email', icon: 'fa fa-envelope-o bg-red' }, { name: 'Enviar SMS', icon: 'glyphicon glyphicon-send bg-red' }, { name: 'Follow Up', icon: 'fa fa-briefcase bg-red' }, { name: 'Ligação', icon: 'fa fa-phone bg-red' }, { name: 'Visita', icon: 'fa fa-car bg-red' }, { name: 'Treinamento', icon: 'fa fa-calendar bg-red' }];

	var prioridades = [{ name: 'Urgente' }, { name: 'Alta' }, { name: 'Normal' }];

	var statusTarefas = [{ name: 'Pendente' }, { name: 'Finalizada' }, { name: 'Cancelada' }, { name: 'Suspensa' }];

	var equipes = [{ name: 'Portal do Lote' }, { name: 'Interna' }];

	var canais = [{ name: 'Administração de Carteira' }, { name: 'Aprovação de Loteamento' }, { name: 'Buscamos o que você precisa' }, { name: 'Cadastro Manual' }, { name: 'Chat On-line' }, { name: 'Carteira do Corretor' }, { name: 'Compra de Carteira' }, { name: 'Compramos seu Lote/Área' }, { name: 'Email' }, { name: 'Empreendimento' }, { name: 'Fale Conosco' }, { name: 'Futuros Lançamentos' }, { name: 'Investidores no Exterior' }, { name: 'Leads do Facebook' }, { name: 'Ligamos para você' }, { name: 'Newslleter' }, { name: 'Securitização de Carteira' }, { name: 'Stand de Vendas' }, { name: 'Telefone' }];

	var origens = [{ name: 'Site' }, { name: 'CMS' }, { name: 'WhatsApp' }, { name: 'Facebook' }, { name: 'OLX' }, { name: 'Viva Real' }];

	var midias = [{ name: 'Site' }, { name: 'Google' }, { name: 'Facebook' }, { name: 'Youtube' }, { name: 'Placa/Outdoor' }, { name: 'Indicação' }, { name: 'Jornal' }, { name: 'TV' }, { name: 'Internet' }, { name: 'Faixa' }, { name: 'Rádio' }, { name: 'Planfleto' }, { name: 'Plantão' }];

	var etapas = [{ name: 'Prospeção' }, { name: 'Negociação' }, { name: 'Visita' }, { name: 'Proposta' }, { name: 'Venda' }, { name: 'Cancelada' }];

	var regioes = [{ name: 'Norte' }, { name: 'Nordeste' }, { name: 'Noroeste' }, { name: 'Sul' }, { name: 'Sudeste' }, { name: 'Sudoeste' }, { name: 'Leste' }, { name: 'Oeste' }];

	var estados = [{ estado: 'Acre', sigla: 'AC' }, { estado: 'Alagoas', sigla: 'AL' }, { estado: 'Amapá', sigla: 'AP' }, { estado: 'Amazonas', sigla: 'AM' }, { estado: 'Bahia', sigla: 'BA' }, { estado: 'Ceará', sigla: 'CE' }, { estado: 'Distrito Federal', sigla: 'DF' }, { estado: 'Espírito Santo', sigla: 'ES' }, { estado: 'Goiás', sigla: 'GO' }, { estado: 'Maranhão', sigla: 'MA' }, { estado: 'Mato Grosso', sigla: 'MT' }, { estado: 'Mato Grosso do Sul', sigla: 'MS' }, { estado: 'Minas Gerais', sigla: 'MG' }, { estado: 'Pará', sigla: 'PA' }, { estado: 'Paraíba', sigla: 'PB' }, { estado: 'Paraná', sigla: 'PR' }, { estado: 'Pernambuco', sigla: 'PE' }, { estado: 'Piauí', sigla: 'PI' }, { estado: 'Rio de Janeiro', sigla: 'RJ' }, { estado: 'Rio Grande do Norte', sigla: 'RN' }, { estado: 'Rio Grande do Sul', sigla: 'RS' }, { estado: 'Rondônia', sigla: 'RO' }, { estado: 'Roraima', sigla: 'RR' }, { estado: 'Santa Catarina', sigla: 'SC' }, { estado: 'São Paulo', sigla: 'SP' }, { estado: 'Sergipe', sigla: 'SE' }, { estado: 'Tocantins', sigla: 'TO' }];

	var perfilUsuarios = [{ name: 'Admin' }, { name: 'Atendente' }, { name: 'Corretor' }, { name: 'Gestor' }];

	var finalidades = [{ name: 'Investimento' }, { name: 'Lazer' }, { name: 'Moradia' }, { name: 'Aluguel' }, { name: 'Uso da Família' }];

	function produtos() {
		return $http.get(consts.apiUrl + '/produtos?select=_id%20produto');
	}

	return {
		all: function all() {
			return users;
		},

		primeiro: function primeiro() {
			return users[0];
		},

		getPerfis: function getPerfis() {
			return perfis;
		},

		getCores: function getCores() {
			return cores;
		},

		getLinhaCredito: function getLinhaCredito() {
			return linhaCredito;
		},

		getCodigoFundoGarantidor: function getCodigoFundoGarantidor() {
			return codigoFundoGarantidor;
		},

		getCodigoTipoPessoa: function getCodigoTipoPessoa() {
			return codigoTipoPessoa;
		},

		getCodigoTipoPublicoAlvo: function getCodigoTipoPublicoAlvo() {
			return codigoTipoPublicoAlvo;
		},

		getCodigoTipoModalidadeCredito: function getCodigoTipoModalidadeCredito() {
			return codigoTipoModalidadeCredito;
		},

		getCodigoTipoFinalidadeCredito: function getCodigoTipoFinalidadeCredito() {
			return codigoTipoFinalidadeCredito;
		},

		getCodigoTipoFonteRecurso: function getCodigoTipoFonteRecurso() {
			return codigoTipoFonteRecurso;
		},

		getCodigoTipoProgramaCredito: function getCodigoTipoProgramaCredito() {
			return codigoTipoProgramaCredito;
		},

		getCodigoTipoCronogramaAmortizacao: function getCodigoTipoCronogramaAmortizacao() {
			return codigoTipoCronogramaAmortizacao;
		},

		getCodigoTipoCondicaoEspecial: function getCodigoTipoCondicaoEspecial() {
			return codigoTipoCondicaoEspecial;
		},

		getCodigoTipoFormalizacao: function getCodigoTipoFormalizacao() {
			return codigoTipoFormalizacao;
		},

		getAtendimentos: function getAtendimentos() {
			return atendimentos;
		},

		getTarefas: function getTarefas() {
			return tarefas;
		},

		getPrioridades: function getPrioridades() {
			return prioridades;
		},

		getStatusTarefas: function getStatusTarefas() {
			return statusTarefas;
		},

		getEquipes: function getEquipes() {
			return equipes;
		},

		getCanais: function getCanais() {
			return canais;
		},

		getMidias: function getMidias() {
			return midias;
		},

		getEtapas: function getEtapas() {
			return etapas;
		},

		getEstados: function getEstados() {
			return estados;
		},

		getRegioes: function getRegioes() {
			return regioes;
		},

		getOrigens: function getOrigens() {
			return origens;
		},

		getPerfilUsuarios: function getPerfilUsuarios() {
			return perfilUsuarios;
		},

		getCategoriaProduto: function getCategoriaProduto() {
			return categoriaProduto;
		},

		getProdutos: function getProdutos() {
			return $http.get(consts.apiUrl + '/produtos?select=_id%20produto').catch(function (resp) {
				msgs.addError(resp.data);
			});
		},

		getProdutosAll: function getProdutosAll() {
			return $http.get(consts.apiUrl + '/produtos').catch(function (resp) {
				msgs.addError(resp.data);
			});
		},

		getClientes: function getClientes() {
			var id = auth.getUser()._id;
			var url = consts.apiUrl + '/crm?usuario=' + id + '&select=_id%20cliente';

			if (auth.getUser().perfilUsuario == 'Gestor') {
				url = consts.apiUrl + '/crm?select=_id%20cliente';
			}

			return $http.get(url).catch(function (resp) {
				msgs.addError(resp.data);
			});
		},

		getCrm: function getCrm(id) {
			if (id == undefined) {
				return [];
			} else {
				var url = consts.apiUrl + '/crm?cliente=' + id;

				return $http.get(url).catch(function (resp) {
					msgs.addError(resp.data);
				});
			}
		},

		//descobrir como puxa apenas os dados dos sub-documentos
		getContatos: function getContatos(id) {
			if (id == undefined) {
				return null;
			} else {
				var url = consts.apiUrl + '/crm?cliente=' + id + '&crm[0].contatos';

				return $http.get(url).catch(function (resp) {
					msgs.addError(resp.data);
				});
			}
		},

		//descobrir como puxa apenas os dados dos sub-documentos
		getReferencias: function getReferencias(id) {
			if (id == undefined) {
				return null;
			} else {
				var url = consts.apiUrl + '/crm?cliente=' + id + '&select=crm.referencias';

				return $http.get(url).catch(function (resp) {
					msgs.addError(resp.data);
				});
			}
		},

		getEmails: function getEmails(canal, produto) {
			var id = auth.getUser()._id;
			var url = consts.apiUrl + '/crm?select=cliente%20email%20sexo%20canal%20produto&usuario=' + id;

			if (auth.getUser().perfilUsuario == 'Gestor') {
				url = consts.apiUrl + '/crm?select=cliente%20email%20sexo%20canal%20produto';
			}

			if (canal && produto) {
				url = url + ('&canal=' + canal + '&produto=' + produto);
			} else if (canal) {
				url = url + ('&canal=' + canal);
			} else if (produto) {
				url = url + ('&produto=' + produto);
			}

			console.log('url: ' + url);

			return $http.get(url).catch(function (resp) {
				msgs.addError(resp.data);
			});
		},

		getUsuario: function getUsuario(Id) {
			return $http.get(consts.apiUrl + '/usuarios/', { params: { id: Id } }).catch(function (resp) {
				msgs.addError(resp.data);
			});
		},

		getUsuarios: function getUsuarios() {
			var id = auth.getUser()._id;
			var url = consts.apiUrl + '/usuarios?_id=' + id + '&select=_id%20nome';

			if (auth.getUser().perfilUsuario == 'Gestor') {
				url = consts.apiUrl + '/usuarios?ativo=true&select=_id%20nome';
			}
			return $http.get(url).catch(function (resp) {
				msgs.addError(resp.data);
			});
		},

		getUsuariosAll: function getUsuariosAll() {
			return $http.get(consts.apiUrl + '/usuarios').catch(function (resp) {
				msgs.addError(resp.data);
			});
		},

		getEmpresasAll: function getEmpresasAll() {
			return $http.get(consts.apiUrl + '/empresas').catch(function (resp) {
				msgs.addError(resp.data);
			});
		},

		getFinalidades: function getFinalidades() {
			return finalidades;
		},

		getUserLogado: function getUserLogado() {
			return auth.getUser()._id;
		} //fim return espondo os métodos
	};
}
'use strict';

projeto.factory('msgs', ['toastr', MsgsFactory]);

function MsgsFactory(toastr) {
  function addSuccess(msgs) {
    addMsg(msgs, 'Sucesso', 'success');
  }

  function addError(msgs) {
    addMsg(msgs, 'Erro', 'error');
  }

  function addInfo(msgs) {
    addMsg(msgs, 'Info', 'info');
  }

  function addWarning(msgs) {
    addMsg(msgs, 'Atenção', 'warning');
  }

  function addMsg(msgs, title, method) {
    if (msgs instanceof Array) {
      msgs.forEach(function (msg) {
        return toastr[method](msg, title);
      });
    } else {
      toastr[method](msgs, title);
    }
  }

  return { addSuccess: addSuccess, addError: addError, addInfo: addInfo, addWarning: addWarning };
}
'use strict';

projeto.factory('tabs', [function () {

   function show(owner, _ref) {
      var _ref$tabList = _ref.tabList,
          tabList = _ref$tabList === undefined ? false : _ref$tabList,
          _ref$tabCreate = _ref.tabCreate,
          tabCreate = _ref$tabCreate === undefined ? false : _ref$tabCreate,
          _ref$tabUpdate = _ref.tabUpdate,
          tabUpdate = _ref$tabUpdate === undefined ? false : _ref$tabUpdate,
          _ref$tabDelete = _ref.tabDelete,
          tabDelete = _ref$tabDelete === undefined ? false : _ref$tabDelete,
          _ref$tabLista = _ref.tabLista,
          tabLista = _ref$tabLista === undefined ? false : _ref$tabLista;

      //console.log(owner);
      owner.tabList = tabList;
      owner.tabCreate = tabCreate;
      owner.tabUpdate = tabUpdate;
      owner.tabDelete = tabDelete;
      owner.tabLista = tabLista;
   }

   return { show: show };
}]);
'use strict';

projeto.service('CepService', function ($http, consts, msgs) {
  this.get = function (cep) {
    return $http.get(consts.oapiUrl + '/cep?cep=' + cep).catch(function (resp) {
      msgs.addError('CEP não foi localizado');
    });
  };
});
'use strict';

projeto.service('CidadesService', function ($http, consts, msgs) {

  this.get = function (estado) {
    return $http.get(consts.oapiUrl + '/cidades?estado=' + estado).catch(function (resp) {
      msgs.addError('Cidade não foi localizada');
    });
  };

  this.getNome = function (nome) {
    return $http.get(consts.oapiUrl + '/cidade/' + nome).catch(function (resp) {
      msgs.addError('Cidade não foi localizada');
    });
  };
});
'use strict';

projeto.service('LocalizacaoService', function ($http, consts, msgs) {
  this.get = function (endereco) {
    //Original
    //var params = {address: endereco, sensor: false}
    //var head = {'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Headers': 'Content-Type,Accept'}
    //return $http.get('http://maps.googleapis.com/maps/api/geocode/json', {params: params}, {headers: head} )
    msgs.addInfo('Buscando Coordenadas...');
    return $http.get(consts.oapiUrl + '/location?endereco=' + endereco).catch(function (resp) {
      msgs.addError('Coordenadas não foram localizadas');
    });
  };
});
"use strict";

projeto.service('utilService', function ($http, consts) {
    this.getClientes = function (Id) {
        return $http.get("/crm/", { params: { id: Id } });
    };

    this.getUsuarios = function (Id) {
        return $http.get("/usuarios/", { params: { id: Id } });
    };
});